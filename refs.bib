@misc{ElliotBlogGarbageCollecting,
title = {Garbage collecting the semantics of FRP},
author = {Conal Elliott},
month = jan,
year = {2010},
url = {http://conal.net/blog/posts/garbage-collecting-the-semantics-of-frp/},
keywords = {{derivative}, {design}, {FRP}, {functional reactive programming}, {semantics}}
}

@inproceedings{ElliottHudak97:Fran,
	title = {Functional Reactive Animation},
	booktitle = {International Conference on Functional Programming},
	author = {Conal Elliott and Paul Hudak},
	month = jun,
	year = {1997},
	keywords = {{FRP}},
	pages = {163--173}
},

@InProceedings{Elliott2009-push-pull-frp,
 author = {Elliott, Conal M.},
 title = {Push-pull functional reactive programming},
 booktitle = {Haskell '09: Proceedings of the 2nd ACM SIGPLAN symposium on Haskell},
 year = {2009},
 isbn = {978-1-60558-508-6},
 pages = {25--36},
 location = {Edinburgh, Scotland},
 doi = {http://doi.acm.org/10.1145/1596638.1596643},
 publisher = {ACM},
 address = {New York, NY, USA},
 url = {http://conal.net/papers/push-pull-frp/},
}

@techreport{elliott_denotational_2009,
	title = {Denotational design with type class morphisms (extended version)},
	url = {http://conal.net/papers/type-class-morphisms},
	number = {2009-01},
	institution = {{LambdaPix}},
	author = {Conal Elliott},
	month = mar,
	year = {2009}
},


@inproceedings{nilsson_functional_2003,
	address = {Uppsala, Sweden},
	title = {Functional Automatic Differentiation with Dirac Impulses},
	booktitle = {Proceedings of the Eighth {ACM} {SIGPLAN} International Conference on Functional Programming},
	publisher = {{ACM} Press},
	author = {Henrik Nilsson},
	month = aug,
	year = {2003},
	pages = {153–164}
},

@misc{_tutorial_????,
	title = {Tutorial Papers in Functional Programming},
	url = {http://www.cs.chalmers.se/~rjmh/tutorials.html},
	howpublished = {http://www.cs.chalmers.se/{\textasciitilde}rjmh/tutorials.html}
},

@misc{_peter_????,
	title = {Peter Van Roy: Programming Paradigms for Dummies {\textbar} Lambda the Ultimate},
	url = {http://lambda-the-ultimate.org/node/3465},
	howpublished = {http://lambda-the-ultimate.org/node/3465}
},

@article{hughes_functional_1989,
	title = {Why Functional Programming Matters},
	volume = {32},
	number = {2},
	journal = {Computer Journal},
	author = {J. Hughes},
	year = {1989},
	keywords = {Haskell},
	pages = {98–107}
},


@article{sheeran_hardware_2005,
	title = {Hardware Design and Functional Programming: a Perfect Match},
	volume = {11},
	abstract = {This paper aims to explain why I am still fascinated by the use of functional languages in hardware design. I hope that some readers will be tempted to tackle some of the hard problems that I outline in the final section. In particular, I believe that programming language researchers have much to contribute to the field of hardware design.},
	number = {7},
	journal = {j-jucs},
	author = {M. Sheeran},
	year = {2005},
	note = {{\textbar}http://www.jucs.org/jucs\_11\_7/hardware\_design\_and\_functional{\textbar}},
	pages = {1135–1158}
},

@misc{_to_????,
	title = {How to write a good research paper and give a good research talk},
	url = {http://research.microsoft.com/en-us/um/people/simonpj/papers/giving-a-talk/giving-a-talk.htm},
	howpublished = {http://research.microsoft.com/en-us/um/people/simonpj/papers/giving-a-talk/giving-a-talk.htm}
},

@article{landin_next_1966,
	title = {The next 700 programming languages},
	volume = {9},
	url = {http://portal.acm.org/citation.cfm?id=365257},
	doi = {10.1145/365230.365257},
	abstract = {A family of unimplemented computing languages is described that is intended to span differences of application area by a unified framework. This framework dictates the rules about the uses of user-coined names, and the conventions about characterizing functional relationships. Within this framework the design of a specific language splits into two independent parts. One is the choice of written appearances of programs (or more generally, their physical representation). The other is the choice of the abstract entities (such as numbers, character-strings, list of them, functional relations among them) that can be referred to in the language. The system is biased towards “expressions” rather than “statements.” It includes a nonprocedural (purely functional) subsystem that aims to expand the class of users' needs that can be met by a single print-instruction, without sacrificing the important properties that make conventional right-hand-side expressions easy to construct and understand.},
	number = {3},
	journal = {Commun. {ACM}},
	author = {P. J. Landin},
	year = {1966},
	pages = {157--166}
},

@inproceedings{courtney_yampa_2003,
	address = {Uppsala, Sweden},
	title = {The Yampa Arcade},
	booktitle = {Proceedings of the 2003 {ACM} {SIGPLAN} Haskell Workshop {(Haskell'03)}},
	publisher = {{ACM} Press},
	author = {Antony Courtney and Henrik Nilsson and John Peterson},
	month = aug,
	year = {2003},
	keywords = {{FRP}},
	pages = {7–18}
},

@article{elliott_compiling_2003,
	title = {Compiling Embedded Languages},
	volume = {13},
	url = {http://conal.net/papers/jfp-saig/},
	number = {2},
	journal = {Journal of Functional Programming},
	author = {Conal Elliott and Sigbj{\textbackslash}orn Finne and Oege de Moor},
	year = {2003},
	note = {Updated version of paper by the same name that appeared in {SAIG} '00 proceedings.}
},


@book{pierce_types_2002,
	title = {Types and programming languages},
	isbn = {0262162091, 9780262162098},
	publisher = {{MIT} Press},
	author = {Benjamin C. Pierce},
	month = feb,
	year = {2002}
},



@inproceedings{lewerentz_formal_1995,
	title = {Formal Development of Reactive Systems - Case Study Production Cell},
	isbn = {3-540-58867-1},
	url = {http://portal.acm.org/citation.cfm?id=646391},
	publisher = {{Springer-Verlag}},
	editor = {Claus Lewerentz and Thomas Lindner},
	year = {1995}
},


@article{wadler_theorems_1989,
	title = {Theorems for free!},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.38.9875},
	journal = {{FUNCTIONAL} {PROGRAMMING} {LANGUAGES} {AND} {COMPUTER} {ARCHITECTURE}},
	author = {Philip Wadler},
	year = {1989},
	pages = {347---359}
},

@article{hatzigeorgiu_literate_1998,
	title = {Literate programming and the {{\textbackslash}\&ldquo;Spaniel{\textbackslash}\&ldquo;}  method},
	volume = {33},
	url = {http://portal.acm.org/citation.cfm?id=307866&dl=GUIDE&coll=GUIDE&CFID=73292240&CFTOKEN=87559766},
	doi = {10.1145/307824.307866},
	abstract = {Software has to be well structured and well documented in order to be reusable and maintainable. Literate programs have both properties. Unfortunately, even today many programmers write program without proper documentation. We propose a technique by which one can relatively easily transform a well structured program into a literate one. We exemplify the technique by means of an example and we conclude with the presentation of some related work and ideas.},
	number = {12},
	journal = {{SIGPLAN} Not.},
	author = {Nick Hatzigeorgiu and Apostolos Syropoulos},
	year = {1998},
	pages = {52--56}
},

@inproceedings{hudak_arrows_2003,
	series = {Lecture Notes in Computer Science},
	title = {Arrows, Robots, and Functional Reactive Programming},
	volume = {2638},
	booktitle = {Summer School on Advanced Functional Programming 2002, Oxford University},
	publisher = {{Springer-Verlag}},
	author = {Paul Hudak and Antony Courtney and Henrik Nilsson and John Peterson},
	year = {2003},
	keywords = {{FRP}},
	pages = {159–187}
},

@inproceedings{scott_towardmathematical_1971,
	address = {Brooklyn, {N.Y.}},
	title = {Toward A Mathematical Semantics for Computer Languages},
	volume = {{XXI}},
	url = {http://books.google.com/books?id=TekiAAAAMAAJ&#38;dq=70-185593&#38;q=%22toward+a+mathematical+semantics+for+computer+languages%22#search_anchor},
	abstract = {Compilers for high-level languages are generally constructed to give the complete translation of the programs into machine language. As machines merely juggle bit patterns, the concepts of the original language may be lost or at least obscured during this passage. The purpose of a mathematical semantics is to give a correct and meaningful correspondence between programs and mathematical entities in a way that is entirely independent of an implementation. This plan is illustrated in a very elementary way in the introduction. Section {II} connects the general method with the usual idea of state transformations. The next section shows why the mathematics of functions has to be modified to accommodate recursive commands. Section {IV} explains the modification. Section V introduces the environments for handling variables and identifiers, and shows how the semantical equations define equivalence of programs. Section {VI} gives an exposition of the new type of mathematical function spaces that are required for the semantics of procedures when these are allowed in assignment statements. The conclusion traces some of the background of the project and points the way to future work.},
	booktitle = {Proceedings of the Symposium on Computers and Automata},
	publisher = {Polytechnic Press},
	author = {Dana Scott and Christopher Strachey},
	editor = {Jerome Fox},
	month = apr,
	year = {1971},
	keywords = {classic-papers-fall09, denotational-semantics, semantics},
	pages = {19–46},
	annote = {* Classic Papers: 10/14/2009 {(Rob} Simmons)}
},

@inproceedings{wadler_essence_1992,
	address = {Albuquerque, New Mexico, United States},
	title = {The essence of functional programming},
	isbn = {0-89791-453-8},
	url = {http://portal.acm.org/citation.cfm?doid=143165.143169},
	doi = {10.1145/143165.143169},
	abstract = {This paper explores the use monads to structure functional programs. No prior knowledge of monads or category theory is required.},
	booktitle = {Proceedings of the 19th {ACM} {SIGPLAN-SIGACT} symposium on Principles of programming languages},
	publisher = {{ACM}},
	author = {Philip Wadler},
	year = {1992},
	pages = {1--14}
},

@inproceedings{hudak_history_2007,
	address = {San Diego, California},
	title = {A history of Haskell: being lazy with class},
	isbn = {{978-1-59593-766-X}},
	shorttitle = {A history of Haskell},
	url = {http://portal.acm.org/citation.cfm?id=1238856&dl=GUIDE&coll=GUIDE&CFID=57390487&CFTOKEN=50896203},
	doi = {10.1145/1238844.1238856},
	abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
	booktitle = {Proceedings of the third {ACM} {SIGPLAN} conference on History of programming languages},
	publisher = {{ACM}},
	author = {Paul Hudak and John Hughes and Simon Peyton Jones and Philip Wadler},
	year = {2007},
	keywords = {Haskell},
	pages = {12--1-12-55}
},

@misc{hudak_haskell_2009,
	address = {San Francisco, California},
	title = {Haskell and the Arts},
	url = {http://www.infoq.com/presentations/haskell-arts-paul-hudak},
	author = {Paul Hudak},
	month = jul,
	year = {2009}
},



@inproceedings{armstrong_history_2007,
	address = {San Diego, California},
	title = {A history of Erlang},
	url = {http://portal.acm.org/popBibTex.cfm?id=1238850&ids=SERIES003.1238844.1238850&types=series.proceeding.article&reqtype=article&coll=GUIDE&dl=GUIDE&CFID=57390487&CFTOKEN=50896203},
	doi = {10.1145/1238844.1238850},
	booktitle = {Proceedings of the third {ACM} {SIGPLAN} conference on History of programming languages  - {HOPL} {III}},
	author = {Joe Armstrong},
	year = {2007},
	pages = {6--1-6-26}
},


@inproceedings{courtney_genuinely_2001,
	title = {Genuinely Functional User Interfaces},
	booktitle = {2001 Haskell Workshop},
	author = {Antony Courtney and Conal Elliott},
	month = sep,
	year = {2001},
	keywords = {{FRP}}
},

@article{backus_can_1978,
	title = {Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs},
	volume = {21},
	shorttitle = {Can programming be liberated from the von Neumann style?},
	url = {http://portal.acm.org/citation.cfm?id=359579&dl=GUIDE&coll=GUIDE&CFID=57390487&CFTOKEN=50896203},
	doi = {10.1145/359576.359579},
	abstract = {Conventional programming languages are growing ever more enormous, but not stronger. Inherent defects at the most basic level cause them to be both fat and weak: their primitive word-at-a-time style of programming inherited from their common ancestor—the von Neumann computer, their close coupling of semantics to state transitions, their division of programming into a world of expressions and a world of statements, their inability to effectively use powerful combining forms for building new programs from existing ones, and their lack of useful mathematical properties for reasoning about programs. An alternative functional style of programming is founded on the use of combining forms for creating programs. Functional programs deal with structured data, are often nonrepetitive and nonrecursive, are hierarchically constructed, do not name their arguments, and do not require the complex machinery of procedure declarations to become generally applicable. Combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages. Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose “unknowns” are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written. Combining forms are chosen not only for their programming power but also for the power of their associated algebraic laws. General theorems of the algebra give the detailed behavior and termination conditions for large classes of programs. A new class of computing systems uses the functional programming style both in its programming language and in its state transition rules. Unlike von Neumann languages, these systems have semantics loosely coupled to states—only one state transition occurs per major computation.},
	number = {8},
	journal = {Commun. {ACM}},
	author = {John Backus},
	year = {1978},
	keywords = {algebra of programs, applicative computing systems, applicative state transition systems, combining forms, functional forms, functional programming, metacomposition, models of computing systems, program correctness, programming languages, program termination, program transformation, von neumann computers, von neumann languages},
	pages = {613--641}
},

@inproceedings{nilsson_functional_2002,
	address = {Pittsburgh, Pennsylvania, {USA}},
	title = {Functional Reactive Programming, Continued},
	booktitle = {Proceedings of the 2002 {ACM} {SIGPLAN} Haskell Workshop {(Haskell'02)}},
	publisher = {{ACM} Press},
	author = {Henrik Nilsson and Antony Courtney and John Peterson},
	month = oct,
	year = {2002},
	keywords = {{FRP}},
	pages = {51–64}
},

@book{peyton-jones_implementation_1987,
	title = {The Implementation of Functional Programming Languages {(Prentice-Hall} International Series in Computer Series)},
	isbn = {{013453333X}},
	url = {http://www.amazon.com/exe℅bidos/redirect?tag=citeulike07-20&path=ASIN/013453333X},
	publisher = {Prentice Hall},
	author = {Simon L {Peyton-Jones}},
	month = may,
	year = {1987},
	note = {Published: Hardcover},
	keywords = {compiler, functional-programming, language-miranda}
},


@book{pierce_types_2002-1,
	title = {Types and programming languages},
	isbn = {0262162091, 9780262162098},
	publisher = {{MIT} Press},
	author = {Benjamin C. Pierce},
	month = feb,
	year = {2002}
}